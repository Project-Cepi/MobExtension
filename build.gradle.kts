plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    kotlin("jvm") version "1.5.10"
    id("com.github.johnrengelman.shadow") version "7.0.0"
    id("org.jetbrains.dokka") version "1.5.0"
    kotlin("plugin.serialization") version "1.4.21"
    `maven-publish`

    // Apply the application plugin to add support for building a jar
    java
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            groupId = project.properties["group"] as? String?
            artifactId = project.name
            version = project.properties["version"] as? String?

            from(components["java"])
        }
    }
}

allprojects {
    apply(plugin = "java")
    apply(plugin = "kotlin")

    repositories {
        // Use mavenCentral
        mavenCentral()

        maven(url = "https://jitpack.io")
        maven(url = "https://repo.spongepowered.org/maven")
        maven(url = "https://repo.velocitypowered.com/snapshots/")
    }

    dependencies {
        // Align versions of all Kotlin components
        compileOnly(platform("org.jetbrains.kotlin:kotlin-bom"))

        // Use the Kotlin JDK 8 standard library.
        compileOnly(kotlin("stdlib"))

        // Use the Kotlin reflect library.
        compileOnly(kotlin("reflect"))

        // Compile Minestom into project
        compileOnly("com.github.Minestom:Minestom:fa07d861a6")

        // Use kotlinx serialization
        compileOnly("org.jetbrains.kotlinx", "kotlinx-serialization-json", "1.2.2")

        // implement KStom
        compileOnly("com.github.Project-Cepi:KStom:d9f7795e88")

        // Use mworlza's canvas
        implementation("com.github.Project-Cepi:canvas:d25c5c27f3")

        // Use the JUpiter test library.
        testImplementation("org.junit.jupiter:junit-jupiter:5.7.2")

        // Add levels
        compileOnly("com.github.Project-Cepi:LevelExtension:cfcbcd8bf7")

        // Add Kepi
        compileOnly("com.github.Project-Cepi:Kepi:710df7ad94")
    }

    tasks {
        test { useJUnitPlatform() }
    }

    tasks.withType<Test> {
        useJUnitPlatform()
    }

    configurations {
        testImplementation {
            extendsFrom(configurations.compileOnly.get())
        }
    }

    tasks {
        test { useJUnitPlatform() }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
    }

    val compileKotlin: org.jetbrains.kotlin.gradle.tasks.KotlinCompile by tasks
    compileKotlin.kotlinOptions.jvmTarget = JavaVersion.VERSION_16.toString()

    compileKotlin.kotlinOptions {
        freeCompilerArgs = listOf("-Xinline-classes")
    }
}

dependencies {
    implementation(project(":meta"))
}

sourceSets.main {
    java {
        srcDir("src/autogenerated/kotlin")
    }
}

tasks {
    named<com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar>("shadowJar") {
        archiveBaseName.set("mob")
        mergeServiceFiles()
        minimize()
    }

    build { dependsOn(shadowJar) }
}